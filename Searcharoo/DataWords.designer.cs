#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Searcharoo
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="search")]
	public partial class DataWordsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWord(Word instance);
    partial void UpdateWord(Word instance);
    partial void DeleteWord(Word instance);
    partial void InsertWorld_syn(World_syn instance);
    partial void UpdateWorld_syn(World_syn instance);
    partial void DeleteWorld_syn(World_syn instance);
    partial void Insertmeaning(meaning instance);
    partial void Updatemeaning(meaning instance);
    partial void Deletemeaning(meaning instance);
    #endregion
		
		public DataWordsDataContext() : 
				base(global::Searcharoo.Properties.Settings.Default.searchConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataWordsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataWordsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataWordsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataWordsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Word> Words
		{
			get
			{
				return this.GetTable<Word>();
			}
		}
		
		public System.Data.Linq.Table<World_syn> World_syns
		{
			get
			{
				return this.GetTable<World_syn>();
			}
		}
		
		public System.Data.Linq.Table<meaning> meanings
		{
			get
			{
				return this.GetTable<meaning>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Word")]
	public partial class Word : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Word1;
		
		private EntitySet<World_syn> _World_syns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWord1Changing(string value);
    partial void OnWord1Changed();
    #endregion
		
		public Word()
		{
			this._World_syns = new EntitySet<World_syn>(new Action<World_syn>(this.attach_World_syns), new Action<World_syn>(this.detach_World_syns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Word", Storage="_Word1", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Word1
		{
			get
			{
				return this._Word1;
			}
			set
			{
				if ((this._Word1 != value))
				{
					this.OnWord1Changing(value);
					this.SendPropertyChanging();
					this._Word1 = value;
					this.SendPropertyChanged("Word1");
					this.OnWord1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_World_syn", Storage="_World_syns", ThisKey="Id", OtherKey="Word_id")]
		public EntitySet<World_syn> World_syns
		{
			get
			{
				return this._World_syns;
			}
			set
			{
				this._World_syns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_World_syns(World_syn entity)
		{
			this.SendPropertyChanging();
			entity.Word = this;
		}
		
		private void detach_World_syns(World_syn entity)
		{
			this.SendPropertyChanging();
			entity.Word = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.World_syn")]
	public partial class World_syn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Word_id;
		
		private string _Word_S;
		
		private System.Nullable<double> _distance;
		
		private EntityRef<Word> _Word;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWord_idChanging(int value);
    partial void OnWord_idChanged();
    partial void OnWord_SChanging(string value);
    partial void OnWord_SChanged();
    partial void OndistanceChanging(System.Nullable<double> value);
    partial void OndistanceChanged();
    #endregion
		
		public World_syn()
		{
			this._Word = default(EntityRef<Word>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word_id", DbType="Int NOT NULL")]
		public int Word_id
		{
			get
			{
				return this._Word_id;
			}
			set
			{
				if ((this._Word_id != value))
				{
					if (this._Word.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWord_idChanging(value);
					this.SendPropertyChanging();
					this._Word_id = value;
					this.SendPropertyChanged("Word_id");
					this.OnWord_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word_S", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string Word_S
		{
			get
			{
				return this._Word_S;
			}
			set
			{
				if ((this._Word_S != value))
				{
					this.OnWord_SChanging(value);
					this.SendPropertyChanging();
					this._Word_S = value;
					this.SendPropertyChanged("Word_S");
					this.OnWord_SChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_distance", DbType="Float")]
		public System.Nullable<double> distance
		{
			get
			{
				return this._distance;
			}
			set
			{
				if ((this._distance != value))
				{
					this.OndistanceChanging(value);
					this.SendPropertyChanging();
					this._distance = value;
					this.SendPropertyChanged("distance");
					this.OndistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Word_World_syn", Storage="_Word", ThisKey="Word_id", OtherKey="Id", IsForeignKey=true)]
		public Word Word
		{
			get
			{
				return this._Word.Entity;
			}
			set
			{
				Word previousValue = this._Word.Entity;
				if (((previousValue != value) 
							|| (this._Word.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Word.Entity = null;
						previousValue.World_syns.Remove(this);
					}
					this._Word.Entity = value;
					if ((value != null))
					{
						value.World_syns.Add(this);
						this._Word_id = value.Id;
					}
					else
					{
						this._Word_id = default(int);
					}
					this.SendPropertyChanged("Word");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.meaning")]
	public partial class meaning : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _word1;
		
		private string _word2;
		
		private string _rootA;
		
		private string _rootE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onword1Changing(string value);
    partial void Onword1Changed();
    partial void Onword2Changing(string value);
    partial void Onword2Changed();
    partial void OnrootAChanging(string value);
    partial void OnrootAChanged();
    partial void OnrootEChanging(string value);
    partial void OnrootEChanged();
    #endregion
		
		public meaning()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_word1", DbType="NVarChar(20)")]
		public string word1
		{
			get
			{
				return this._word1;
			}
			set
			{
				if ((this._word1 != value))
				{
					this.Onword1Changing(value);
					this.SendPropertyChanging();
					this._word1 = value;
					this.SendPropertyChanged("word1");
					this.Onword1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_word2", DbType="NVarChar(20)")]
		public string word2
		{
			get
			{
				return this._word2;
			}
			set
			{
				if ((this._word2 != value))
				{
					this.Onword2Changing(value);
					this.SendPropertyChanging();
					this._word2 = value;
					this.SendPropertyChanged("word2");
					this.Onword2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rootA", DbType="NVarChar(20)")]
		public string rootA
		{
			get
			{
				return this._rootA;
			}
			set
			{
				if ((this._rootA != value))
				{
					this.OnrootAChanging(value);
					this.SendPropertyChanging();
					this._rootA = value;
					this.SendPropertyChanged("rootA");
					this.OnrootAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rootE", DbType="NVarChar(20)")]
		public string rootE
		{
			get
			{
				return this._rootE;
			}
			set
			{
				if ((this._rootE != value))
				{
					this.OnrootEChanging(value);
					this.SendPropertyChanging();
					this._rootE = value;
					this.SendPropertyChanged("rootE");
					this.OnrootEChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
